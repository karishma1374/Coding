/*DP LCS with delete , insert and replace

DP CODE :  */



class Solution {
public:
    int minDistance(string word1, string word2) {
        
        int n=word1.size(); // row
        int m=word2.size(); // coloumn
        
        int t[n+1][m+1];
        
        for(int i=0;i<m+1;i++) t[0][i]=i;//initialization
        
        for(int i=1;i<n+1;i++) t[i][0]=i;// '' ''
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(word1[i-1]==word2[j-1])
                {
                    t[i][j]=t[i-1][j-1];//if corresponding row and column are same,just choose diagonal value 
                }
                else
                {
                t[i][j]= 1+min(t[i][j-1],min(t[i-1][j-1],t[i-1][j]));//choose min of [][] three boxes around x
                                                                    //               [] x
                }
            }
        }
        return t[n][m];
    }
};