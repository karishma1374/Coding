/*OPTIMIZATION OF MEMOIZATION
THIS IS A CHILD PROBLEM  OF MCM(matrix chain multiplication)

*/

class Solution {
public:
   vector<vector<int>>t;//our dp matrix 
    
    bool ispalindrome(string &s , int i , int j)
    {
        if(i==j)return true;
        if(i>j) return true;
        while(i<j)
        {
            if(s[i]!=s[j])
            return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(string &s, int i, int j)
    {
        if(i>=j)                            return 0;
        else if(t[i][j]!=-1)                return t[i][j];
        else if(ispalindrome(s,i,j)==true)
        {
            t[i][j]=0;
            return 0;
        }
           
        int mn=INT_MAX;
        for(int k=i;k<=j-1;k++)
        {
            int left=0;
            int right=0;
            if(ispalindrome(s,i,k)==true)
            {
                right = solve(s,k+1,j);
            }
            else
            {
                t[i][k] = 0;
                continue;
            }
            
            int temp = right+1;
            mn = min(mn,temp);
        }
        return t[i][j] = mn;
    }
    
    int minCut(string s) 
    {
        int n = s.length();
        t.resize(n+1,vector<int>(n+1,-1));
        return solve(s,0,n-1);  
    }
};



