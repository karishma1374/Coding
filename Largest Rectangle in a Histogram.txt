//LEETCODE HARD:84
//CODE:

class Solution 
{
public:
    void Nearest_smallest_left(vector<int>& left,vector<int> & heights)
    {
        stack<pair<int,int>>s;
        for(int i=0;i<heights.size();i++)
        {
            while(!s.empty() && s.top().first>=heights[i])
            {
                s.pop();
            }
            if(s.empty())
            {
                left.push_back(-1);
            }
            else 
                left.push_back(s.top().second);
                
             s.push({heights[i],i});   
        }
    }
    
    void Nearest_smallest_right(vector<int>& right,vector<int> & heights)
    {
       stack<pair<int,int>>s1;
        for(int i=heights.size()-1;i>=0;i--)
        {
            while(!s1.empty() && s1.top().first>=heights[i])
            {
                s1.pop();
            }
            if(s1.empty())
            {
                right.push_back(heights.size());
            }
            else 
            right.push_back(s1.top().second);
                
            s1.push({heights[i],i});   
        }
        
        reverse(right.begin(),right.end());
    }
    
    
    int largestRectangleArea(vector<int>& heights)
    {
        vector<int> left;    //nearest_smallest_from left;
        vector<int> right;   //neatest_smallest_from right;
        Nearest_smallest_left(left,heights);
        Nearest_smallest_right(right,heights);
        
        int ans=0;
        int area=0;
      
        
        for(int i=0;i<heights.size();i++)
        {
            area=heights[i]*(right[i]-left[i]-1);
            if(ans<area)
                ans=area;
        }
        
        return ans;
    }
};
